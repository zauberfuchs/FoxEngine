

#ifndef _FRUSTUMR_
#define _FRUSTUMR_

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

#include "CompilerPre.h"

#include "Vector3f.h"
#include "Plane.h"
#include "AABox.h"

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

namespace CG221 {

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

    #ifndef _FRUSTUM_RESULT
    #define _FRUSTUM_RESULT
    enum eFrustumResult {
        OUTSIDE, INTERSECT, INSIDE
    };
    #endif

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

class CG221_API FrustumR 
{
private:

	enum eFrustumPlane {
		TOP = 0,
		BOTTOM,
		LEFT,
		RIGHT,
		NEARP,
		FARP
	};


public:

	

	Plane pl[6];


	CG221::Vector3f ntl,ntr,nbl,nbr,ftl,ftr,fbl,fbr,X,Y,Z,camPos;
	float nearD, farD, ratio, angle;
	float sphereFactorX, sphereFactorY;
	double tang;
	double nw,nh,fw,fh;

	FrustumR();
	~FrustumR();

	void setFrustum(float *m);
	void setCamInternals(float angle, float radius, float nearD, float farD);
	void setCamDef(CG221::Vector3f &p, CG221::Vector3f &l, CG221::Vector3f &u);
	int pointInFrustum(CG221::Vector3f &p);
	int sphereInFrustum(CG221::Vector3f &p, float radius);
	int boxInFrustum(CG221::AABox &b); // not implemented

	//void drawPoints();
	//void drawLines();
	//void drawPlanes();
	//void drawNormals();

	//void printPlanes();

};

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

} // namespace CG221 {

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////


#endif