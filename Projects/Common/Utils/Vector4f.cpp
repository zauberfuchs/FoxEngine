
#include "Vector4f.h"

//////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////

namespace CG221 {

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Vector4f::~Vector4f()
{

}
//////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////

// Return Normal of Vector4f's
CG221::Vector4f Normalized(const CG221::Vector4f &a)
{
	Vector4f ret(a);
	return ret.normalize();
}

// Dot product of two Vector4f's
float DotProduct(const CG221::Vector4f &a, const CG221::Vector4f &b) 
{
	return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w;
}

// Swap two Vector4f's
void SwapVec(CG221::Vector4f &a, CG221::Vector4f &b) 
{
	Vector4f tmp(a);

	a = b;
	b = tmp;
}

// Are these two Vector4f's nearly equal?
bool NearlyEquals( const CG221::Vector4f& a, const CG221::Vector4f& b, float r ) 
{
	CG221::Vector4f diff = a - b;  // difference

	return(DotProduct(diff, diff) < r*r);  // radius
}



//////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////

} // namespace CG221 {

//////////////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////////////
